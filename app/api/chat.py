from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from typing import Dict, List, Optional
from app.services.ai_service import AIService
from app.services.search_service import SearchService
from app.utils.logging import ChatLogger
from app.utils.metrics import MetricsCollector
import time
import uuid

router = APIRouter()

class ChatRequest(BaseModel):
    query: str
    user_id: Optional[str] = None
    context: Optional[Dict] = None

class ChatResponse(BaseModel):
    answer: str
    sources: List[Dict] = []
    confidence: float = 0.0
    suggestions: List[str] = []
    context: Optional[Dict] = None
    response_time_ms: float = 0.0

# Initialize services
search_service = SearchService()
chat_logger = ChatLogger()
metrics_collector = MetricsCollector()

@router.post("/query", response_model=ChatResponse)
async def chat_query(request: ChatRequest):
    """Process chat query and return AI response"""
    start_time = time.time()
    
    try:
        # Get AI service from global state
        from app.main import ai_service
        
        if not ai_service:
            raise HTTPException(status_code=503, detail="AI service not available")
        
        user_id = request.user_id or str(uuid.uuid4())
        
        # Process query with AI service
        response_data = await ai_service.process_query(
            query=request.query,
            user_context=request.context
        )
        
        # Calculate response time
        response_time = time.time() - start_time
        
        # Log the interaction
        chat_logger.log_query(
            user_id=user_id,
            query=request.query,
            response=response_data,
            duration=response_time
        )
        
        # Record metrics
        metrics_collector.record_query(
            duration=response_time,
            confidence=response_data.get("confidence", 0.0)
        )
        
        # Format response
        response = ChatResponse(
            answer=response_data["answer"],
            sources=response_data.get("sources", []),
            confidence=response_data.get("confidence", 0.0),
            suggestions=response_data.get("suggestions", []),
            context=response_data.get("context"),
            response_time_ms=response_time * 1000
        )
        
        return response
        
    except Exception as e:
        print(f"Error in chat query: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

@router.get("/suggestions")
async def get_suggestions():
    """Get common query suggestions"""
    suggestions = [
        "T√¨m v·∫£i cotton tr·∫Øng 90cm c√≤n trong kho kh√¥ng?",
        "H∆∞·ªõng d·∫´n ki·ªÉm tra nguy√™n ph·ª• li·ªáu ƒë·∫ßu ca",
        "M√£ h√†ng ABC123 n√™n l∆∞u ·ªü v·ªã tr√≠ n√†o?",
        "N·∫øu h√†ng b·ªã d∆∞ th·ª´a th√¨ ph·∫£i l√†m g√¨?",
        "Hi·ªÉn th·ªã l·ªãch s·ª≠ nh·∫≠p xu·∫•t h√†ng g·∫ßn ƒë√¢y",
        "Danh s√°ch c√°c v·ªã tr√≠ kho c√≤n tr·ªëng",
        "Quy tr√¨nh ƒë√≥ng g√≥i s·∫£n ph·∫©m v·∫£i",
        "Ki·ªÉm tra t·ªìn kho c√°c m·∫∑t h√†ng s·∫Øp h·∫øt"
    ]
    
    return {
        "suggestions": suggestions,
        "categories": [
            {"name": "T√¨m ki·∫øm h√†ng h√≥a", "icon": "üîç"},
            {"name": "Quy tr√¨nh thao t√°c", "icon": "üìã"},
            {"name": "V·ªã tr√≠ l∆∞u kho", "icon": "üìç"},
            {"name": "B√°o c√°o t·ªìn kho", "icon": "üìä"}
        ]
    }

@router.post("/feedback")
async def submit_feedback(feedback: Dict):
    """Submit user feedback for response quality"""
    try:
        # Log feedback for training improvements
        chat_logger.logger.info(f"FEEDBACK: {feedback}")
        
        return {"status": "success", "message": "Feedback received"}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))